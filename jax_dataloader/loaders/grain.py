# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/loader.grain.ipynb.

# %% ../../nbs/loader.grain.ipynb 3
from __future__ import print_function, division, annotations
from ..imports import *
from ..datasets import ArrayDataset, JAXDataset
from . import BaseDataLoader
from ..utils import get_config
from ..tests import *
import jax_dataloader as jdl

# %% auto 0
__all__ = ['DataLoaderGrain']

# %% ../../nbs/loader.grain.ipynb 4
class DataLoaderGrain(BaseDataLoader):

    # @typecheck
    def __init__(
        self, 
        dataset: Union[JAXDataset, TorchDataset, HFDataset],
        batch_size: int = 1,  # Batch size
        shuffle: bool = False,  # If true, dataloader shuffles before sampling each batch
        num_workers: int = 0, # Number of workers to use
        drop_last: bool = False, # Drop last batch or not
        **kwargs
    ):

        sampler = grain.IndexSampler(
            num_records=len(dataset),
            shuffle=shuffle,
            seed=get_config().global_seed,
            shard_options=grain.NoSharding()
        )
        operations = (grain.Batch(batch_size, drop_remainder=drop_last),)
        self.dataloader = grain.DataLoader(
            data_source=dataset,
            sampler=sampler,
            operations=operations,
            worker_count=num_workers
        )

    def __next__(self):
        return next(self.dataloader)

    def __iter__(self):
        return self.dataloader.__iter__()
